{
  "name": "chatbot-01",
  "type": "registry:block",
  "registryDependencies": ["button", "input", "label", "card", "scroll-area"],
  "dependencies": ["ai", "lucide-react", "@ai-sdk/openai", "zustand"],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { useChat } from \"ai/react\";\r\nimport { FileSpreadsheet } from \"lucide-react\";\r\nimport { UserMessage, BotMessage } from \"./messages-ui\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport Image from \"next/image\";\r\nimport PromptBox from \"./prompt-box\";\r\n\r\nexport function ChatWindow() {\r\n  const bottomScrollRef = useRef<HTMLDivElement>(null);\r\n  const { handleSubmit, handleInputChange, messages, input } = useChat({\r\n    initialMessages: [],\r\n    maxToolRoundtrips: 2,\r\n    api: \"/api/chat-01\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    bottomScrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <ScrollArea className=\"h-full w-full flex flex-col px-2\">\r\n      <div\r\n        className={cn(\r\n          \"mb-4 flex-1 flex flex-col gap-4 max-w-4xl mx-auto pt-10 pb-20\"\r\n        )}\r\n      >\r\n        {messages.map((message, index: number) => {\r\n          return (\r\n            <div key={message?.id ?? index}>\r\n              {message.role === \"assistant\"\r\n                ? message.content.length > 0 && (\r\n                    <BotMessage message={message.content} />\r\n                  )\r\n                : message.role === \"user\" && (\r\n                    <UserMessage message={message.content} />\r\n                  )}\r\n              <div className=\"flex justify-end gap-2 mt-2 pr-10\">\r\n                {message?.experimental_attachments?.map((attachment, index) => {\r\n                  if (attachment?.contentType?.startsWith(\"image/\")) {\r\n                    return (\r\n                      <Image\r\n                        key={`${message.id}-${index}`}\r\n                        src={attachment.url}\r\n                        width={200}\r\n                        height={200}\r\n                        alt={\"attachment\"}\r\n                        className=\"rounded-md\"\r\n                      />\r\n                    );\r\n                  } else {\r\n                    return (\r\n                      <div\r\n                        key={`${message.id}-${index}`}\r\n                        className=\"flex bg-muted px-4 py-2 rounded-lg items-center gap-2 max-w-sm\"\r\n                      >\r\n                        <FileSpreadsheet size={16} className=\"shrink-0\" />\r\n                        <p className=\"text-sm truncate\">{attachment.name}</p>\r\n                      </div>\r\n                    );\r\n                  }\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        <div ref={bottomScrollRef} className=\"pb-12\" />\r\n      </div>\r\n      <PromptBox\r\n        handleSubmit={handleSubmit}\r\n        handleInputChange={handleInputChange}\r\n        input={input}\r\n      />\r\n    </ScrollArea>\r\n  );\r\n}\r\n",
      "path": "block/chatbot-01/chat/chat-window.tsx",
      "target": "components/chatbot-01/chat/chat-window.tsx"
    },
    {
      "type": "registry:block",
      "content": "import { ChatWindow } from \"./chat-window\";\r\nimport Sidebar from \"../sidebar/sidebar\";\r\n\r\nexport default async function Chat() {\r\n  return (\r\n    <div className=\"flex-1 flex h-screen bg-muted\">\r\n      <Sidebar />\r\n      <ChatWindow />\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "block/chatbot-01/chat/chat.tsx",
      "target": "components/chatbot-01/chat/chat.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\nimport { Forward, Paperclip } from \"lucide-react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport { ChatRequestOptions } from \"ai\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport Image from \"next/image\";\r\n\r\ntype PromptBoxProps = {\r\n  input: string;\r\n  handleInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleSubmit: (\r\n    event?: {\r\n      preventDefault?: () => void;\r\n    },\r\n    chatRequestOptions?: ChatRequestOptions\r\n  ) => void;\r\n};\r\n\r\nexport default function PromptBox({\r\n  handleInputChange,\r\n  handleSubmit,\r\n  input,\r\n}: PromptBoxProps) {\r\n  const [files, setFiles] = useState<FileList | undefined>(undefined);\r\n  const [previews, setPreviews] = useState<string[]>([]);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleKeyDown = (e: any) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      handleSubmitWithAttachments(e);\r\n    }\r\n  };\r\n\r\n  const handleSubmitWithAttachments = (e: any) => {\r\n    e.preventDefault();\r\n    handleSubmit(e, {\r\n      experimental_attachments: files,\r\n    });\r\n    setFiles(undefined);\r\n    setPreviews([]);\r\n\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (files) {\r\n      const newPreviews = Array.from(files).map((file) => {\r\n        if (file.type.startsWith(\"image/\")) {\r\n          return URL.createObjectURL(file);\r\n        }\r\n        return \"\";\r\n      });\r\n      setPreviews(newPreviews);\r\n\r\n      return () => {\r\n        newPreviews.forEach((preview) => URL.revokeObjectURL(preview));\r\n      };\r\n    }\r\n  }, [files]);\r\n\r\n  return (\r\n    <div className=\"absolute bottom-4 inset-x-0 w-full max-w-4xl mx-auto bg-background border rounded-full\">\r\n      {files && (\r\n        <div className=\"absolute -top-36 left-2 flex flex-col gap-2 bg-background px-2 py-1 rounded-lg\">\r\n          <div className=\"flex gap-2\">\r\n            {previews.map((preview, index) =>\r\n              preview ? (\r\n                <Image\r\n                  key={index}\r\n                  src={preview}\r\n                  alt={`Preview ${index + 1}`}\r\n                  width={80}\r\n                  height={80}\r\n                  className=\"rounded-md object-cover w-[6rem] h-[6rem]\"\r\n                />\r\n              ) : (\r\n                <div\r\n                  key={index}\r\n                  className=\"w-[6rem] h-[6rem] bg-gray-200 rounded-md flex items-center justify-center text-xs\"\r\n                >\r\n                  {files[index].name.split(\".\").pop()?.toUpperCase()}\r\n                </div>\r\n              )\r\n            )}\r\n          </div>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {previews.length} files selected\r\n          </p>\r\n        </div>\r\n      )}\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          handleSubmitWithAttachments(e);\r\n        }}\r\n        className=\"relative rounded-full\"\r\n      >\r\n        <div className=\"absolute top-1/2 -translate-y-1/2 left-2\">\r\n          <Label\r\n            htmlFor=\"file\"\r\n            className={cn(\r\n              buttonVariants({ variant: \"ghost\", size: \"icon\" }),\r\n              \"cursor-pointer w-8 h-8 rounded-full\"\r\n            )}\r\n          >\r\n            <Paperclip size={16} />\r\n          </Label>\r\n        </div>\r\n        <Input\r\n          type=\"file\"\r\n          className=\"absolute top-5 left-5 w-fit hidden\"\r\n          onChange={(event) => {\r\n            if (event.target.files) {\r\n              setFiles(event.target.files);\r\n            }\r\n          }}\r\n          id=\"file\"\r\n          multiple\r\n          ref={fileInputRef}\r\n          accept=\"image/*\"\r\n        />\r\n        <Input\r\n          className={cn(\r\n            \"w-full resize-none h-full focus:outline-none focus:ring-2 focus:ring-muted dark:focus:ring-muted focus-visible:ring-0 focus-visible:ring-offset-0 py-5 px-5 pl-12 border-0 bg-transparent\"\r\n          )}\r\n          placeholder=\"Type your message...\"\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          onKeyDown={handleKeyDown}\r\n          spellCheck={true}\r\n          data-gramm=\"false\"\r\n          data-gramm_editor=\"false\"\r\n          data-enable-grammarly=\"false\"\r\n        />\r\n        <Button\r\n          className=\"absolute top-1/2 -translate-y-1/2 right-3 px-2 bg-foreground hover:text-background hover:bg-foreground/80 text-background focus:outline-none focus:ring-2 focus:ring-gray-900 dark:focus:ring-gray-100 rounded-full\"\r\n          size=\"sm\"\r\n          type=\"submit\"\r\n          variant=\"ghost\"\r\n        >\r\n          <Forward className=\"h-5 w-5\" />\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "block/chatbot-01/chat/prompt-box.tsx",
      "target": "components/chatbot-01/chat/prompt-box.tsx"
    },
    {
      "type": "registry:block",
      "content": "import { BotIcon, UserIcon } from \"lucide-react\";\r\nimport { MemoizedReactMarkdown } from \"@/lib/markdown\";\r\n\r\ntype UserMessageProps = {\r\n  message: string;\r\n};\r\nexport const UserMessage: React.FC<UserMessageProps> = ({ message }) => {\r\n  return (\r\n    <div className=\"flex-1 relative w-full flex flex-col items-end\">\r\n      <div className=\"flex w-fit justify-start gap-x-2 max-w-[80%]\">\r\n        <div\r\n          className={\r\n            \"w-fit grid grid-cols-1 gap-2 text-sm leading-5  border py-2.5 px-4 rounded-xl rounded-se-none whitespace-pre-wrap\"\r\n          }\r\n        >\r\n          {message}\r\n        </div>\r\n        <div className=\"bg-background border w-8 h-8 rounded-full grid place-items-center\">\r\n          <UserIcon size={18} className=\"\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const BotMessage = ({ message }: { message: string }) => {\r\n  return (\r\n    <div className=\"flex-1 relative w-full max-w-[80%]\">\r\n      <div className=\"flex w-full justify-start gap-x-2 max-w-4xl mx-auto h-full\">\r\n        <div className=\"bg-muted border w-8 h-8 rounded-full grid place-items-center\">\r\n          <BotIcon size={18} className=\"\" />\r\n        </div>\r\n        <BotMarkdownMessage>{message}</BotMarkdownMessage>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BotMarkdownMessage = ({ children }: { children: string }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-fit grid grid-cols-1 gap-2 border text-sm leading-5 bg-muted py-1 px-4 rounded-xl rounded-ss-none\"\r\n      }\r\n    >\r\n      <MemoizedReactMarkdown\r\n        className=\"prose break-words dark:prose-invert prose-p:leading-relaxed prose-pre:p-0\"\r\n        components={{\r\n          li: ({ children }) => (\r\n            <li className=\"list-decimal ml-4\">{children}</li>\r\n          ),\r\n          ol: ({ children }) => <ol className=\"list-disc \">{children}</ol>,\r\n          h1: ({ children }) => (\r\n            <h1 className=\"text-xl font-bold \">{children}</h1>\r\n          ),\r\n          h2: ({ children }) => (\r\n            <h2 className=\"text-lg font-bold \">{children}</h2>\r\n          ),\r\n          h3: ({ children }) => (\r\n            <h3 className=\"text-base font-bold \">{children}</h3>\r\n          ),\r\n          blockquote: ({ children }) => (\r\n            <blockquote className=\"italic bg-white px-4 rounded-md \">\r\n              {children}\r\n            </blockquote>\r\n          ),\r\n          b: ({ children }) => <b className=\"font-bold\">{children}</b>,\r\n          a: ({ children }) => {\r\n            return (\r\n              <a\r\n                className=\"text-background underline cursor-pointer\"\r\n                target=\"_blank\"\r\n              >\r\n                {children}\r\n              </a>\r\n            );\r\n          },\r\n          p: ({ children }) => <p className=\"my-2\">{children}</p>,\r\n        }}\r\n      >\r\n        {children}\r\n      </MemoizedReactMarkdown>\r\n    </div>\r\n  );\r\n};\r\n",
      "path": "block/chatbot-01/chat/messages-ui.tsx",
      "target": "components/chatbot-01/chat/messages-ui.tsx"
    },
    {
      "type": "registry:block",
      "content": "import SidebarBox from \"./sidebar-box\";\r\n\r\nexport default async function Sidebar() {\r\n  return <SidebarBox />;\r\n}\r\n",
      "path": "block/chatbot-01/sidebar/sidebar.tsx",
      "target": "components/chatbot-01/sidebar/sidebar.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport useSidebar from \"@/hooks/use-sidebar\";\r\n\r\nexport default function ProfileBox() {\r\n  const sidebar = useSidebar();\r\n\r\n  return (\r\n    <div className=\"space-y-4 mt-2\">\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger className=\"focus:outline-0 flex items-center gap-4\">\r\n          <Avatar className=\"border\">\r\n            <AvatarImage src={\"\"} />\r\n            <AvatarFallback className=\"bg-background\">JD</AvatarFallback>\r\n          </Avatar>\r\n          {sidebar.isOpen && <h2 className=\"font-semibold\">John Doe</h2>}\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent>\r\n          <DropdownMenuItem className=\"cursor-pointer\" onClick={async () => {}}>\r\n            Logout\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "block/chatbot-01/sidebar/profile-menu.tsx",
      "target": "components/chatbot-01/sidebar/profile-menu.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport useSidebar from \"@/hooks/use-sidebar\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport ProfileMenu from \"./profile-menu\";\r\nimport SidebarToggle from \"./sidebar-toggle\";\r\n\r\nexport default function SidebarBox() {\r\n  const sidebar = useSidebar();\r\n  const [isMounted, setIsMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (window.innerWidth < 768) {\r\n        if (sidebar.isOpen) {\r\n          sidebar.toggleSidebar();\r\n        }\r\n      }\r\n    };\r\n    handleResize();\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, [sidebar]);\r\n\r\n  useEffect(() => {\r\n    setIsMounted(true);\r\n  }, []);\r\n\r\n  if (!isMounted) return null;\r\n  return (\r\n    <div\r\n      className={cn(\"relative z-50 hidden h-screen md:block\")}\r\n      style={{\r\n        transition: \"width 300ms ease-in-out\",\r\n        width: sidebar.isOpen ? \"16rem\" : \"4rem\",\r\n        padding: 0,\r\n        // transform: sidebar.isOpen ? \"translateX(0)\" : \"translateX(-4rem)\",\r\n      }}\r\n    >\r\n      <SidebarToggle\r\n        className={cn(\r\n          \"absolute top-3 z-20\",\r\n          sidebar.isOpen ? \"right-2\" : \"right-4\"\r\n        )}\r\n      />\r\n      <div\r\n        className={cn(\r\n          \"relative flex h-full w-full flex-col bg-background\",\r\n          sidebar.isOpen ? \"p-4\" : \"p-3\"\r\n        )}\r\n      >\r\n        {/* Top section */}\r\n        <div className=\"flex-shrink-0\">\r\n          {sidebar.isOpen && <h1 className=\"text-xl font-bold\">LOGO</h1>}\r\n        </div>\r\n        {/* Middle section (chat history) */}\r\n        <div className=\"mt-6 flex-grow overflow-hidden\">\r\n          {sidebar.isOpen && (\r\n            <div className=\"h-full overflow-y-auto\">\r\n              <h1 className=\"text-sm font-medium\">Chat History</h1>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Bottom section (user profile) */}\r\n        <div className=\"mt-auto flex-shrink-0\">\r\n          <ProfileMenu />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "block/chatbot-01/sidebar/sidebar-box.tsx",
      "target": "components/chatbot-01/sidebar/sidebar-box.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport { PanelLeftOpen, PanelRightOpen } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport useSidebar from \"@/hooks/use-sidebar\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport default function SidebarToggle({ className }: { className?: string }) {\r\n  const sidebar = useSidebar();\r\n  return (\r\n    <Button\r\n      variant=\"outline\"\r\n      size=\"icon\"\r\n      onClick={sidebar.toggleSidebar}\r\n      className={cn(\"w-8 h-8 my-2\", className)}\r\n    >\r\n      {sidebar.isOpen ? (\r\n        <PanelRightOpen size={18} />\r\n      ) : (\r\n        <PanelLeftOpen size={18} />\r\n      )}\r\n    </Button>\r\n  );\r\n}\r\n",
      "path": "block/chatbot-01/sidebar/sidebar-toggle.tsx",
      "target": "components/chatbot-01/sidebar/sidebar-toggle.tsx"
    },
    {
      "content": "import { FC, memo } from \"react\";\r\nimport ReactMarkdown, { Options } from \"react-markdown\";\r\n\r\nexport const MemoizedReactMarkdown: FC<Options> = memo(\r\n  ReactMarkdown,\r\n  (prevProps, nextProps) =>\r\n    prevProps.children === nextProps.children &&\r\n    prevProps.className === nextProps.className\r\n);\r\n",
      "path": "lib/markdown.ts",
      "target": "lib/markdown.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { create } from \"zustand\";\r\n\r\ntype SidebarState = {\r\n  isOpen: boolean;\r\n  toggleSidebar: () => void;\r\n};\r\n\r\nconst useSidebar = create<SidebarState>((set) => ({\r\n  isOpen: true,\r\n  toggleSidebar: () => set((state) => ({ isOpen: !state.isOpen })),\r\n}));\r\n\r\nexport default useSidebar;\r\n",
      "path": "hooks/use-sidebar.tsx",
      "target": "hooks/use-sidebar.tsx"
    },
    {
      "content": "import { convertToCoreMessages, streamText } from \"ai\";\r\nimport { createOpenAI } from \"@ai-sdk/openai\";\r\n\r\nconst apiKey = process.env.OPENAI_API_KEY;\r\nif (!apiKey) {\r\n  throw Error(\"OpenAI Api Key not set\");\r\n}\r\n\r\nconst openai = createOpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n  compatibility: \"strict\",\r\n});\r\n\r\nexport async function POST(req: Request) {\r\n  const { messages } = await req.json();\r\n\r\n  const result = await streamText({\r\n    model: openai(\"gpt-4o-mini\"),\r\n    messages: convertToCoreMessages(messages),\r\n    system: \"You are a helpful assistant.\",\r\n    async onFinish(event) {\r\n      // This is a callback function that is called when the conversation is finished.\r\n    },\r\n  });\r\n\r\n  return result.toDataStreamResponse();\r\n}\r\n",
      "path": "api/chat-01.tsx",
      "target": "app/api/chat-01.tsx"
    }
  ]
}
